// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MMORTS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package pl.edu.agh.ki.mmorts;

public class Message implements java.lang.Cloneable, java.io.Serializable
{
    public int convId;

    public byte[] content;

    public Message()
    {
    }

    public Message(int convId, byte[] content)
    {
        this.convId = convId;
        this.content = content;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Message _r = null;
        if(rhs instanceof Message)
        {
            _r = (Message)rhs;
        }

        if(_r != null)
        {
            if(convId != _r.convId)
            {
                return false;
            }
            if(!java.util.Arrays.equals(content, _r.content))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::pl::edu::agh::ki::mmorts::Message");
        __h = IceInternal.HashUtil.hashAdd(__h, convId);
        __h = IceInternal.HashUtil.hashAdd(__h, content);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(convId);
        Ice.ByteSeqHelper.write(__os, content);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        convId = __is.readInt();
        content = Ice.ByteSeqHelper.read(__is);
    }

    public static final long serialVersionUID = 261684110L;
}
